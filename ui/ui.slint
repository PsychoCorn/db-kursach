import { Button, VerticalBox, StandardButton, StandardTableView, HorizontalBox, ScrollView, ComboBox, SpinBox } from "std-widgets.slint";

export component AuthorizationWindow inherits Window {
    callback authorization(string, string);
    VerticalBox {
        Text {
            text: "Введите логин и пароль";
        }

        VerticalLayout {
            Text {
                text: "Логин";
            }
            login_input := TextInput {}
        }

        VerticalLayout {
            Text {
                text: "Пароль";
            }
            password_input := TextInput {
                input_type: password;
            }
        }

        Button {
            text: "Авторизовтаься";
            clicked => {
                root.authorization(login_input.text, password_input.text);
            }
        }
    }
}

export component ErrorWindow inherits Dialog {
    in-out property <string> message: "";
    Text { text: "Ошибка: \{root.message}"; }
}

export component RegisterUserMenu inherits Window {
}

export component AdminMainMenu inherits Window {
    callback groups();
    callback specializaions();
    callback students();
    callback subjects();
    callback academic_plan();
    callback students_cards();
    callback student_accounts();
    callback teacher_accounts();
    width: 215px;
    title: "Меню сотрудника деканата";
    VerticalBox {
        Text { text: "Вы вошли сотрудник деканата"; }
        Button {
            height: 50px;
            width: 200px;
            text: "Специальности";
            clicked => {specializaions();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Группы";
            clicked => {groups();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Студенты";
            clicked => {students();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Предметы";
            clicked => {subjects();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Учебный план";
            clicked => {academic_plan();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Успеваемость";
            clicked => {students_cards();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Аккаунты студентов";
            clicked => {student_accounts();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Аккаунты преподавателей";
            clicked => {teacher_accounts();}
        }
    }
}


export component DecanMainMenu inherits Window {
    height: 500px;
    width: 500px;
    title: "Меню сотрудника деканата";
}

export component TeacherMainMenu inherits Window {
    callback show_group(string, string);
    callback update_groups(string);
    in-out property <[string]> subjects;
    in-out property <[string]> groups;
    width: 1200px;
    title: "Меню преподавателя";
    VerticalBox {
        Text { text: "Выберите курс"; }
        subject := ComboBox { 
            model: subjects; 
            selected(current-value) => {
                update_groups(current-value);
            }
        }
        Text { text: "Выберите группу"; }
        group := ComboBox { model: groups; }
        Button {
            text: "Показать группу";
            clicked => {show_group(subject.current-value, group.current-value);}
        }
    }
}

export component StudentMainMenu inherits Window {
    in-out property <string> info;
    callback group();
    callback marks();
    callback plan();
    width: 500px;
    title: "Меню студента";
    VerticalBox {
        Text { text: "Вы вошли как \{info}"; }
        Button {
            text: "Группа";
            clicked => {group();}
        }
        Button {
            text: "Учебный план";
            clicked => {plan();}
        }
        Button {
            text: "Успеваемость";
            clicked => {marks();}
        }
    }
}

export component FullTableWindow inherits Window {
    callback export_to_excel();
    callback add_new();
    callback change_row(int);
    callback refresh();
    in-out property <[[StandardListViewItem]]> data: [];
    in-out property <[TableColumn]> columns: [];
    in-out property <string> window_title: "";
    title: window_title;
    min-height: 500px;
    min-width: 1500px;
    HorizontalLayout {
        padding: 20px;
        spacing: 10px;
        Button {
            height: 25px;
            width: 100px;
            text: "Обновить";
            clicked => { refresh(); }
        }
        Button {
            height: 25px;
            width: 100px;
            text: "Изменить";
            clicked => { change_row(table.current-row); }
        }
        Button {
            height: 25px;
            width: 100px;
            text: "Добавить";
            clicked => { add_new(); }
        }
        Button {
            height: 25px;
            width: 200px;
            text: "Экспортировать в xlsx";
            clicked => { export_to_excel(); }
        }
    }
    ScrollView {
        table := StandardTableView {
            width: root.width;
            columns: root.columns;
            rows: root.data;
        }
    }
    
}

export component AddSpecialization inherits Window {
    callback ok(string, string);
    height: 150px;
    width: 500px;
    title: "Добавить специализацию";
    VerticalBox {
        Text {
            text: "Введите шифр";
        }
        cifr := TextInput {}
        Text { text: "Введите название специальности"; }
        name := TextInput {}
        Button {
            text: "ОК";
            clicked => {ok(cifr.text, name.text);}
        }
    }
}

export component ChangeSpecialization inherits Window {
    callback ok(string, string);
    callback delete();
    in-out property <string> cifr_value : "";
    in-out property <string> name_value : "";
    height: 200px;
    width: 500px;
    title: "Изменить специализацию";
    VerticalBox {
        Text {
            text: "Введите шифр";
        }
        cifr := TextInput { text: cifr_value; }
        Text { text: "Введите название специальности"; }
        name := TextInput { text: name_value; }
        Button {
            text: "ОК";
            clicked => {ok(cifr.text, name.text);}
        }
        Button {
            text: "Удалить специализацию";
            clicked => {delete();}
        }
    }
}

export component AddGroup inherits Window {
    callback ok(string, int, int);
    in-out property <[string]> cifrs;
    width: 500px;
    title: "Добавить группу";
    VerticalBox {
        Text { text: "Выберите шифр"; }
        cifr := ComboBox { model: cifrs; }
        Text { text: "Введите год"; }
        year := SpinBox {}
        Text { text: "Введите номер"; }
        number := SpinBox {}
        Button {
            text: "ОК";
            clicked => {ok(cifr.current-value, year.value, number.value);}
        }
    }
}

export component ChangeGroup inherits Window {
    callback ok(string, int, int);
    callback delete();
    in-out property <[string]> cifrs;
    in-out property <string> cifr_value;
    in-out property <int> year_value;
    in-out property <int> number_value;
    width: 500px;
    title: "Изменить группу";
    VerticalBox {
        Text { text: "Выберите шифр"; }
        cifr := ComboBox { model: cifrs; current-value: cifr_value; }
        Text { text: "Введите год"; }
        year := SpinBox { value: year_value; }
        Text { text: "Введите номер"; }
        number := SpinBox { value: number_value; }
        Button {
            text: "ОК";
            clicked => {ok(cifr.current-value, year.value, number.value);}
        }
        Button {
            text: "Удалить группу";
            clicked => {delete();}
        }
    }
}

export component AddStudent inherits Window {
    callback ok(string, string, string, string);
    in-out property <[string]> groups;
    width: 500px;
    title: "Добавить студента";
    VerticalBox {
        Text { text: "Введите имя"; }
        f_name := TextInput {}
        Text { text: "Введите фамилию"; }
        s_name := TextInput {}
        Text { text: "Введите отчество"; }
        m_name := TextInput {}
        Text { text: "Выберите группу"; }
        group := ComboBox { model: groups; }
        Button {
            text: "ОК";
            clicked => {ok(f_name.text, s_name.text, m_name.text, group.current-value);}
        }
    }
}

export component ChangeStudent inherits Window {
    callback ok(string, string, string, string);
    callback delete();
    in-out property <[string]> groups;
    in-out property <string> group_value;
    in-out property <string> f_name_value;
    in-out property <string> s_name_value;
    in-out property <string> m_name_value;
    width: 500px;
    title: "Добавить студента";
    VerticalBox {
        Text { text: "Введите имя"; }
        f_name := TextInput { text: f_name_value; }
        Text { text: "Введите фамилию"; }
        s_name := TextInput { text: s_name_value; }
        Text { text: "Введите отчество"; }
        m_name := TextInput { text: m_name_value; }
        Text { text: "Выберите группу"; }
        group := ComboBox { model: groups; current-value: group_value; }
        Button {
            text: "ОК";
            clicked => {ok(f_name.text, s_name.text, m_name.text, group.current-value);}
        }
        Button {
            text: "Удалить студента";
            clicked => {delete();}
        }
    }
}

export component AddSubject inherits Window {
    callback ok(string);
    height: 150px;
    width: 500px;
    title: "Добавить предмет";
    VerticalBox {
        Text {
            text: "Введите название";
        }
        name := TextInput {}
        Button {
            text: "ОК";
            clicked => {ok(name.text);}
        }
    }
}

export component ChangeSubject inherits Window {
    callback ok(string);
    callback delete();
    in-out property <string> name_value;
    height: 150px;
    width: 500px;
    title: "Изменить предмет";
    VerticalBox {
        Text {
            text: "Введите название";
        }
        name := TextInput { text: name_value; }
        Button {
            text: "ОК";
            clicked => {ok(name.text);}
        }
        Button {
            text: "Удалить предмет";
            clicked => {delete();}
        }
    }
}

export component AddAcademicPlan inherits Window {
    callback ok(string, string, string, int, int);
    in-out property <[string]> specializaions;
    in-out property <[string]> subjects;
    in-out property <[string]> c_types;
    width: 500px;
    title: "Добавить запись в учебный план";
    VerticalBox {
        Text { text: "Выберите специализацию"; }
        specializaion := ComboBox { model: specializaions; }
        Text { text: "Выберите предмет"; }
        subject := ComboBox { model: subjects; }
        Text { text: "Выберите вид аттестации"; }
        c_type := ComboBox { model: c_types; }
        Text { text: "Введите количетво часов"; }
        hours := SpinBox { maximum: 10000; }
        Text { text: "Введите номер семестра"; }
        semester := SpinBox { maximum: 10000; }
        Button {
            text: "ОК";
            clicked => {ok(specializaion.current-value, subject.current-value, c_type.current-value, hours.value, semester.value);}
        }
    }
}

export component ChangeAcademicPlan inherits Window {
    callback ok(string, string, string, int, int);
    callback delete();
    in-out property <[string]> specializations;
    in-out property <[string]> subjects;
    in-out property <[string]> c_types;
    in-out property <string> specialization_value;
    in-out property <string> subject_value;
    in-out property <string> c_type_value;
    in-out property <int> hours_value;
    in-out property <int> semester_value;
    width: 500px;
    title: "Изменить запись в учебном плане";
    VerticalBox {
        Text { text: "Выберите специализацию"; }
        specialization := ComboBox { model: specializations; current-value: specialization_value; }
        Text { text: "Выберите предмет"; }
        subject := ComboBox { model: subjects; current-value: subject_value; }
        Text { text: "Выберите вид аттестации"; }
        c_type := ComboBox { model: c_types; current-value: c_type_value; }
        Text { text: "Введите количество часов"; }
        hours := SpinBox { value: hours_value;  maximum: 10000; }
        Text { text: "Введите номер семестра"; }
        semester := SpinBox { value: semester_value;  maximum: 10000; }
        Button {
            text: "ОК";
            clicked => {ok(specialization.current-value, subject.current-value, c_type.current-value, hours.value, semester.value);}
        }
        Button {
            text: "Удалить запись";
            clicked => {delete();}
        }
    }
}

export component AdminChooseGroup inherits Window {
    callback ok(string);
    in-out property <[string]> groups;
    height: 150px;
    width: 500px;
    title: "Выбор группы";
    VerticalBox {
        Text {
            text: "Выберите группу";
        }
        group := ComboBox { model: groups; }
        Button {
            text: "ОК";
            clicked => {ok(group.current-value);}
        }
    }
}

export component AdminMarksTableWindow inherits Window {
    callback export_to_excel();
    callback refresh();
    in-out property <[[StandardListViewItem]]> data: [];
    in-out property <string> window_title: "";
    title: window_title;
    min-height: 500px;
    min-width: 1500px;
    HorizontalLayout {
        padding: 20px;
        spacing: 10px;
        Button {
            height: 25px;
            width: 100px;
            text: "Обновить";
            clicked => { refresh(); }
        }
        Button {
            height: 25px;
            width: 200px;
            text: "Экспортировать в xlsx";
            clicked => { export_to_excel(); }
        }
    }
    ScrollView {
        table := StandardTableView {
            width: root.width;
            columns: [
                {title: "ID"},
                {title: "Имя"},
                {title: "Фамилия"},
                {title: "Предмет"},
                {title: "Семестр"},
                {title: "Вид аттестации"},
                {title: "Оценка"},
            ];
            rows: root.data;
        }
    }
    
}

export component AddStudentLoggin inherits Window {
    callback ok(string, string, int);
    width: 500px;
    title: "Добавить логин студента";
    VerticalBox {
        Text {
            text: "Введите логин";
        }
        login := TextInput {}
        Text {
            text: "Введите пароль";
        }
        password := TextInput {}
        Text {
            text: "Введите ID студента";
        }
        id := SpinBox { minimum: 1; maximum: 10000000; }
        Button {
            text: "ОК";
            clicked => {ok(login.text, password.text, id.value);}
        }
    }
}

export component ChangeStudentLoggin inherits Window {
    callback delete();
    Button {
        text: "Удалить";
        clicked => {delete();}
    }
}

export component AddTeacherLoggin inherits Window {
    callback ok(string, string);
    width: 500px;
    title: "Добавить логин преподавателя";
    VerticalBox {
        Text {
            text: "Введите логин";
        }
        login := TextInput {}
        Text {
            text: "Введите пароль";
        }
        password := TextInput {}
        Button {
            text: "ОК";
            clicked => {ok(login.text, password.text);}
        }
    }
}

export component ChangeTeacherLoggin inherits Window {
    callback delete();
    Button {
        text: "Удалить";
        clicked => {delete();}
    }
}

export component TeacherTableWindow inherits Window {
    callback mark(int);
    callback refresh();
    in-out property <[[StandardListViewItem]]> data: [];
    title: "Оценка студентов";
    min-height: 500px;
    min-width: 1500px;
    HorizontalLayout {
        padding: 20px;
        spacing: 10px;
        Button {
            height: 25px;
            width: 100px;
            text: "Обновить";
            clicked => { refresh(); }
        }
        Button {
            height: 25px;
            width: 100px;
            text: "Оценить";
            clicked => { mark(table.current-row); }
        }
    }
    ScrollView {
        table := StandardTableView {
            width: root.width;
            columns: [
                {title: "ID"},
                {title: "ФИО"},
                {title: "Вид аттестации"},
                {title: "Оценка"}
            ];
            rows: root.data;
        }
    }
    
}

export component TeacherMarkWindow inherits Window {
    callback ok(string);
    in-out property <string> student_name: "";
    in-out property <[string]> marks: [];
    title: "Оценка студентов";
    min-width: 500px;
    VerticalLayout {
        HorizontalLayout {
            padding: 20px;
            spacing: 10px;
            Text { width: 300px; text: student_name; }
            Text { text: "Оценка"; }
            mark := ComboBox { model: marks; }
        }
        Button {
            text: "Оценить";
            clicked => { ok(mark.current-value); }
        }
    }
}

export component StudentGroupTableWindow inherits Window {
    callback export_to_excel();
    callback refresh();
    in-out property <[[StandardListViewItem]]> data: [];
    title: "Список группы";
    min-width: 500px;
    min-height: 300px;
    HorizontalLayout {
        padding: 20px;
        spacing: 10px;
        Button {
            height: 25px;
            width: 100px;
            text: "Обновить";
            clicked => { refresh(); }
        }
        Button {
            height: 25px;
            width: 200px;
            text: "Экспортировать в xlsx";
            clicked => { export_to_excel(); }
        }
    }
    ScrollView {
        table := StandardTableView {
            width: root.width;
            columns: [{title: "ФИО"}];
            rows: root.data;
        }
    }
    
}

export component StudentPlanTableWindow inherits Window {
    callback export_to_excel(int);
    callback refresh(int);
    in-out property <[[StandardListViewItem]]> data: [];
    title: "Учебный план";
    min-width: 1000px;
    min-height: 300px;
    VerticalBox {
        HorizontalLayout {
            Button {
                height: 25px;
                width: 100px;
                text: "Обновить";
                clicked => { refresh(course.value); }
            }
            Button {
                height: 25px;
                width: 200px;
                text: "Экспортировать в xlsx";
                clicked => { export_to_excel(course.value); }
            }
        }
    
        Text {text: "Выберите курс";}
        course := SpinBox {minimum: 1; maximum: 10; value: 1;}
        ScrollView {
            table := StandardTableView {
                width: root.width;
                columns: [
                    {title: "Предмет"},
                    {title: "Семестр"},
                    {title: "Часы"},
                    {title: "Вид аттестации"},
                ];
                rows: root.data;
            }
        }

    }
}

export component StudentMarksTableWindow inherits Window {
    callback export_to_excel();
    callback refresh();
    in-out property <[[StandardListViewItem]]> data: [];
    title: "Успеваемость";
    min-width: 1000px;
    min-height: 300px;
    VerticalBox {
        HorizontalLayout {
            Button {
                height: 25px;
                width: 100px;
                text: "Обновить";
                clicked => { refresh(); }
            }
            Button {
                height: 25px;
                width: 200px;
                text: "Экспортировать в xlsx";
                clicked => { export_to_excel(); }
            }
        }
    
        ScrollView {
            table := StandardTableView {
                width: root.width;
                columns: [
                    {title: "Предмет"},
                    {title: "Семестр"},
                    {title: "Часы"},
                    {title: "Вид аттестации"},
                    {title: "Оценка"},
                ];
                rows: root.data;
            }
        }

    }
}
import { Button, VerticalBox, StandardButton, StandardTableView, HorizontalBox, ScrollView, ComboBox, SpinBox } from "std-widgets.slint";

export component AuthorizationWindow inherits Window {
    callback authorization(string, string);
    VerticalBox {
        Text {
            text: "Введите логин и пароль";
        }

        VerticalLayout {
            Text {
                text: "Логин";
            }
            login_input := TextInput {}
        }

        VerticalLayout {
            Text {
                text: "Пароль";
            }
            password_input := TextInput {
                input_type: password;
            }
        }

        Button {
            text: "Авторизовтаься";
            clicked => {
                root.authorization(login_input.text, password_input.text);
            }
        }
    }
}

export component ErrorWindow inherits Dialog {
    in-out property <string> message: "";
    Text { text: "Ошибка: \{root.message}"; }
}

export component RegisterUserMenu inherits Window {
}

export component AdminMainMenu inherits Window {
    callback groups();
    callback specializaions();
    callback students();
    height: 500px;
    width: 215px;
    title: "Меню администратора";
    VerticalBox {
        Text { text: "Вы вошли как администратор"; }
        Button {
            height: 50px;
            width: 200px;
            text: "Специальности";
            clicked => {specializaions();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Группы";
            clicked => {groups();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Студенты";
            clicked => {students();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Предметы";
            clicked => {groups();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Аккаунты студентов";
            clicked => {groups();}
        }
        Button {
            height: 50px;
            width: 200px;
            text: "Аккаунты преподавателей";
            clicked => {groups();}
        }
    }
}


export component DecanMainMenu inherits Window {
    height: 500px;
    width: 500px;
    title: "Меню сотрудника деканата";
}

export component TeacherMainMenu inherits Window {
    height: 500px;
    width: 500px;
    title: "Меню преподавателя";
}

export component StudentMainMenu inherits Window {
    in-out property <string> info;
    height: 500px;
    width: 500px;
    title: "Меню студента";
    VerticalBox {
        Text { text: "Вы вошли как \{info}"; }
    }
}

export component FullTableWindow inherits Window {
    callback export_to_excel();
    callback add_new();
    callback change_row(int);
    callback refresh();
    in-out property <[[StandardListViewItem]]> data: [];
    in-out property <[TableColumn]> columns: [];
    in-out property <string> window_title: "";
    title: window_title;
    min-height: 500px;
    min-width: 750px;
    HorizontalLayout {
        padding: 20px;
        spacing: 10px;
        Button {
            height: 25px;
            width: 100px;
            text: "Обновить";
            clicked => { refresh(); }
        }
        Button {
            height: 25px;
            width: 100px;
            text: "Изменить";
            clicked => { change_row(table.current-row); }
        }
        Button {
            height: 25px;
            width: 100px;
            text: "Добавить";
            clicked => { add_new(); }
        }
        Button {
            height: 25px;
            width: 200px;
            text: "Экспортировать в xlsx";
            clicked => { export_to_excel(); }
        }
    }
    ScrollView {
        table := StandardTableView {
            width: root.width;
            columns: root.columns;
            rows: root.data;
        }
    }
    
}

export component AddSpecialization inherits Window {
    callback ok(string, string);
    height: 150px;
    width: 500px;
    title: "Добавить специализацию";
    VerticalBox {
        Text {
            text: "Введите шифр";
        }
        cifr := TextInput {}
        Text { text: "Введите название специальности"; }
        name := TextInput {}
        Button {
            text: "ОК";
            clicked => {ok(cifr.text, name.text);}
        }
    }
}

export component ChangeSpecialization inherits Window {
    callback ok(string, string);
    callback delete();
    in-out property <string> cifr_value : "";
    in-out property <string> name_value : "";
    height: 200px;
    width: 500px;
    title: "Изменить специализацию";
    VerticalBox {
        Text {
            text: "Введите шифр";
        }
        cifr := TextInput { text: cifr_value; }
        Text { text: "Введите название специальности"; }
        name := TextInput { text: name_value; }
        Button {
            text: "ОК";
            clicked => {ok(cifr.text, name.text);}
        }
        Button {
            text: "Удалить специализацию";
            clicked => {delete();}
        }
    }
}

export component AddGroup inherits Window {
    callback ok(string, int, int);
    in-out property <[string]> cifrs;
    width: 500px;
    title: "Добавить группу";
    VerticalBox {
        Text { text: "Выберите шифр"; }
        cifr := ComboBox { model: cifrs; }
        Text { text: "Введите год"; }
        year := SpinBox {}
        Text { text: "Введите номер"; }
        number := SpinBox {}
        Button {
            text: "ОК";
            clicked => {ok(cifr.current-value, year.value, number.value);}
        }
    }
}

export component ChangeGroup inherits Window {
    callback ok(string, int, int);
    callback delete();
    in-out property <[string]> cifrs;
    in-out property <string> cifr_value;
    in-out property <int> year_value;
    in-out property <int> number_value;
    width: 500px;
    title: "Изменить группу";
    VerticalBox {
        Text { text: "Выберите шифр"; }
        cifr := ComboBox { model: cifrs; current-value: cifr_value; }
        Text { text: "Введите год"; }
        year := SpinBox { value: year_value; }
        Text { text: "Введите номер"; }
        number := SpinBox { value: number_value; }
        Button {
            text: "ОК";
            clicked => {ok(cifr.current-value, year.value, number.value);}
        }
        Button {
            text: "Удалить группу";
            clicked => {delete();}
        }
    }
}

export component AddStudent inherits Window {
    callback ok(string, string, string, string);
    in-out property <[string]> groups;
    width: 500px;
    title: "Добавить студента";
    VerticalBox {
        Text { text: "Введите имя"; }
        f_name := TextInput {}
        Text { text: "Введите фамилию"; }
        s_name := TextInput {}
        Text { text: "Введите отчество"; }
        m_name := TextInput {}
        Text { text: "Выберите группу"; }
        group := ComboBox { model: groups; }
        Button {
            text: "ОК";
            clicked => {ok(f_name.text, s_name.text, m_name.text, group.current-value);}
        }
    }
}

export component ChangeStudent inherits Window {
    callback ok(string, string, string, string);
    callback delete();
    in-out property <[string]> groups;
    in-out property <string> group_value;
    in-out property <string> f_name_value;
    in-out property <string> s_name_value;
    in-out property <string> m_name_value;
    width: 500px;
    title: "Добавить студента";
    VerticalBox {
        Text { text: "Введите имя"; }
        f_name := TextInput { text: f_name_value; }
        Text { text: "Введите фамилию"; }
        s_name := TextInput { text: s_name_value; }
        Text { text: "Введите отчество"; }
        m_name := TextInput { text: m_name_value; }
        Text { text: "Выберите группу"; }
        group := ComboBox { model: groups; current-value: group_value; }
        Button {
            text: "ОК";
            clicked => {ok(f_name.text, s_name.text, m_name.text, group.current-value);}
        }
        Button {
            text: "Удалить студента";
            clicked => {delete();}
        }
    }
}